import { ClientOptions } from "./ClientOptions";
/**
 * Minimum data that has to be provided by HttpClient error
 * so that Error can be classified.
 */
export interface HttpClientError<T = any> extends Error {
    response?: HttpClientErrorResponse<T>;
}
/**
 * Minimum data that has to be provided by HttpClient error response
 * so that Error can be classified.
 */
export interface HttpClientErrorResponse<T = any> {
    data: T;
    status: number;
}
export declare abstract class HttpClient {
    /**
     * Http Client connection configuration options.
     * You may modify these values and new clients will use them.
     * Any values provided to a Client constructor will override default options.
     */
    static DefaultOptions: ClientOptions.Configuration;
    clientOptions: ClientOptions.Configuration;
    protected client: any;
    constructor(configOptions?: ClientOptions.Configuration);
    getBaseHttpRequestURL(): string;
    abstract initHttpClient(configOptions?: ClientOptions.Configuration): void;
    abstract httpRequest<T>(method: ClientOptions.HttpMethod, path: string, queryParameters: ({} | object), body: (null | object), headers: any): Promise<T>;
}
